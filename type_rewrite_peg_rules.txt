{
  function flatten(input) {
    return Array.isArray(input) ? input.map(i => flatten(i)).join("") : input;
  }
}

All
  = all: Lines { return flatten(all); }

Lines
  = Line "\n" Lines
  / Line

Line
  = _ "*" _ TypeExpecting _ ComplexType ("#" [^\n\r]*)?
  / _ "*" _ CurlyTypeExpecting _ CurlyType [^\n\r]*
  / _ "*" _ !TypeExpecting !CurlyTypeExpecting [^\n\r]*
  / _ [^\n\r]* [^*\n\r]*

CurlyTypeExpecting
  = "@param"
  / "@property"
  / "@return" "s"?
  / "@typedef"
  / "@type"
  / "@this"
  / "@enum"

TypeExpecting
  = "@fires"
  / "@event"

CurlyType
  = "{" _ TypeList _ "}"

TypeList
  = ComplexType _b "|" _b TypeList
  / ComplexType

ComplexType
  = [?!]? ComplexTypeUnmodified "="?
  / "?" 								// short curcuit for the builtin type "?"

ComplexTypeUnmodified
  = "(" _ TypeList _ ")"
  / Spread
  / GenericType
  / FunctionType
  / SimpleType
  / InlineObjectType

InlineObjectType
  = "{" _b InlineObjectPropertyList _b "}"

InlineObjectPropertyList
  = InlineObjectProperty _ "," _b InlineObjectPropertyList
  / InlineObjectProperty

InlineObjectProperty
  = [A-Za-z][A-Za-z0-9_]* _ ":" _b ComplexType

Spread
  = "..." ComplexType

FunctionType
  = "function" _ "(" _ (FunctionThis? _b ParameterList)? ")" (":" _b ComplexType)?

FunctionThis
  = "this:"
  / "new:"

SimpleType
  = RewriteType
  / BuiltinType
  / ConvertedType
  / GenericParameter

NoChar
 = [^A-Za-z0-9_]

GenericType
  = SimpleType "."? "<" ParameterList ">"

ParameterList
  = TypeList "," _b ParameterList
  / TypeList

ConvertedType
  = "module:" [a-zA-Z/]+ (("~" / ".") [a-zA-Z]+)? &NoChar

GenericParameter
  = [A-Z] &NoChar

_b "break or whitespace"
  = _ "\n" _ "*" _
  / _

_ "whitespace"
  = [ \t]*
